'use client';
import React, { useEffect, useState, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useRouter, usePathname } from 'next/navigation';
import { useToast } from '@/app/components/ui/toast/use-toast';
import {
	Product,
	KindeUser,
	DashboardProps,
} from '@/app/dashboard/types/dashboard_types';
import { useMediaQuery } from '@/hooks/use-media-query';
import {
	Tabs,
	TabsContent,
	TabsList,
	TabsTrigger,
} from '@/components/ui/Tabs/Tabs';
import { DashboardHeader } from './components/dashboardHeader';
import { YourAdsTab } from './components/yourAdsTab';
import { PublishedAdsTab } from './components/publishAdTab';
import { ExtendAdModal } from './components/extendAdModel';
import { ExpiringAdsAlert } from './components/expiringAdsAlert';
import { SearchFilter } from './components/searchFilter';
import { Badge } from '@/components/ui/badge';
import {
	Settings,
	Bell,
	LineChart,
	Calendar,
	ChevronDown,
	RefreshCw,
	Clock,
	ArrowUpRight,
	Activity,
	PieChart,
	TrendingUp,
	Eye,
	MousePointer,
	Percent,
	CheckCircle,
	X,
	HelpCircle,
	Info,
	ChevronRight,
} from 'lucide-react';
import { Button } from '@/components/ui/button';

const Dashboard: React.FC<DashboardProps> = ({ isMenuOpen, user }) => {
	const [products, setProducts] = useState<Product[]>([]);
	const [publishedAds, setPublishedAds] = useState<Product[]>([]);
	const [loading, setLoading] = useState<boolean>(true);
	const [error, setError] = useState<string | null>(null);
	const [filter, setFilter] = useState<string>('');
	const [expiringAds, setExpiringAds] = useState<Product[]>([]);
	const [selectedExpiringAd, setSelectedExpiringAd] = useState<Product | null>(
		null
	);
	const [isConfigOpen, setIsConfigOpen] = useState<boolean>(false);
	const [isInitialized, setIsInitialized] = useState(false);
	const [userData, setUserData] = useState<any>(null);
	const [activeTimeframe, setActiveTimeframe] = useState('weekly');
	const [isRefreshing, setIsRefreshing] = useState(false);
	const { toast } = useToast();
	const [notification, setNotification] = useState<string | null>(null);
	const [showHelp, setShowHelp] = useState<boolean>(false);

	const StatCardSkeleton = () => (
		<motion.div
			className='bg-slate-800/70 rounded-xl p-5 border border-slate-700/50 animate-pulse'
			initial={{ opacity: 0.5 }}
			animate={{ opacity: 1 }}
			transition={{ duration: 1.5, repeat: Infinity }}>
			<div className='flex justify-between items-start mb-3'>
				<div className='bg-slate-700/50 p-2 rounded-lg w-9 h-9' />
				<div className='bg-slate-700/50 w-16 h-4 rounded' />
			</div>
			<div className='bg-slate-700/50 w-3/4 h-8 rounded mb-2' />
			<div className='bg-slate-700/50 w-1/2 h-4 rounded' />
		</motion.div>
	);

	const ProductCardSkeleton = () => (
		<motion.div
			className='bg-slate-800/70 rounded-xl p-5 border border-slate-700/50 animate-pulse'
			initial={{ opacity: 0.5 }}
			animate={{ opacity: 1 }}
			transition={{ duration: 1.5, repeat: Infinity }}>
			<div className='bg-slate-700/50 w-full h-40 rounded-lg mb-4' />
			<div className='bg-slate-700/50 w-3/4 h-5 rounded mb-2' />
			<div className='bg-slate-700/50 w-1/2 h-4 rounded mb-4' />
			<div className='bg-slate-700/50 w-full h-10 rounded-lg' />
		</motion.div>
	);

	const fetchUserData = useCallback(async () => {
		try {
			setIsRefreshing(true);
			const response = await fetch('/api/auth/user');
			if (!response.ok) throw new Error('Failed to fetch user data');

			const userData = await response.json();

			// Store token for later API calls
			sessionStorage.setItem('userToken', userData.idToken);
			sessionStorage.setItem('userRole', JSON.stringify(userData.roles));

			return userData;
		} catch (error) {
			console.error('Error fetching user data:', error);
			setError('Authentication failed');
			throw error;
		} finally {
			setIsRefreshing(false);
		}
	}, []);

	// Fetch products and published ads
	const fetchProducts = useCallback(
		async (email) => {
			try {
				const token = sessionStorage.getItem('userToken');
				const response = await fetch(
					`/api/product?email=${encodeURIComponent(email || '')}&timeframe=${activeTimeframe}`,
					{
						headers: {
							Authorization: `Bearer ${token}`,
							'Cache-control': 'no-cache',
						},
					}
				);
				if (!response.ok) throw new Error('Failed to fetch products');
				const data = await response.json();
				return data.map((product: Product) => ({
					...product,
					isPublished: Boolean(product.isPublished),
				}));
			} catch (error) {
				console.error('Error fetching products:', error);
				throw error;
			}
		},
		[activeTimeframe]
	);

	const fetchPublishedAds = useCallback(
		async (email) => {
			try {
				const token = sessionStorage.getItem('userToken');

				const response = await fetch(
					`/api/publishProducts?timeframe=${activeTimeframe}`,
					{
						headers: {
							Authorization: `Bearer ${token}`,
							'x-user-email': email || '',
							'Cache-Control': 'no-cache',
						},
					}
				);
				if (!response.ok) throw new Error('Failed to fetch published ads');
				const data = await response.json();
				return data;
			} catch (error) {
				console.error('Error fetching published ads:', error);
				throw error;
			}
		},
		[activeTimeframe]
	);

	// Initialize data
	useEffect(() => {
		const initializeData = async () => {
			if (isInitialized) return;

			try {
				setLoading(true);
				const fetchedUserData = await fetchUserData();
				setUserData(fetchedUserData);
				const [productsData, publishedAdsData] = await Promise.all([
					fetchProducts(fetchedUserData.email),
					fetchPublishedAds(fetchedUserData.email),
				]);

				const publishedAdIds = new Set(
					publishedAdsData.map((ad: Product) => ad.id)
				);
				const updatedProducts = productsData.map((product: Product) => ({
					...product,
					isPublished: publishedAdIds.has(product.id),
				}));

				setProducts(updatedProducts);
				setPublishedAds(publishedAdsData);
				setIsInitialized(true);
			} catch (error) {
				setError('Failed to initialize dashboard');
				toast({
					title: 'Error',
					description: 'Failed to load dashboard data. Please try again.',
					variant: 'destructive',
				});
			} finally {
				setLoading(false);
			}
		};

		initializeData();
	}, [isInitialized, fetchProducts, fetchPublishedAds, fetchUserData, toast]);

	// Refresh data
	const refreshData = async () => {
		try {
			setIsRefreshing(true);
			const [productsData, publishedAdsData] = await Promise.all([
				fetchProducts(userData?.email || ''),
				fetchPublishedAds(userData?.email || ''),
			]);

			const publishedAdIds = new Set(
				publishedAdsData.map((ad: Product) => ad.id)
			);
			const updatedProducts = productsData.map((product: Product) => ({
				...product,
				isPublished: publishedAdIds.has(product.id),
			}));

			setProducts(updatedProducts);
			setPublishedAds(publishedAdsData);

			toast({
				title: 'Data refreshed',
				description: 'Your dashboard data has been updated.',
			});
		} catch (error) {
			console.error('Error refreshing data:', error);
			toast({
				title: 'Refresh failed',
				description: 'Unable to refresh dashboard data. Please try again.',
				variant: 'destructive',
			});
		} finally {
			setIsRefreshing(false);
		}
	};

	// Handle ad extension
	const handleExtendAd = async (adId: string, extensionDays: number) => {
		try {
			const response = await fetch('/api/extendAd', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({
					id: adId,
					extensionDays,
				}),
			});

			if (!response.ok) {
				throw new Error('Failed to extend ad');
			}

			const updatedProductsResponse = await fetch(
				`/api/product?email=${encodeURIComponent(user.email)}`
			);
			const updatedProducts = await updatedProductsResponse.json();
			setProducts(updatedProducts);

			setExpiringAds(expiringAds.filter((ad) => ad.id !== adId));

			toast({
				title: 'Ad Extended',
				description: `Your ad has been extended by ${extensionDays} days.`,
			});
		} catch (error) {
			console.error('Error extending ad:', error);
			toast({
				title: 'Extension Failed',
				description: 'Unable to extend your ad. Please try again.',
				variant: 'destructive',
			});
		}
	};

	const handleTogglePublish = useCallback(
		async (id: string) => {
			// Validate input
			if (!id) {
				toast({
					title: 'Invalid Product',
					description: 'No product ID provided.',
					variant: 'destructive',
				});
				return;
			}

			// Find the product
			const product = products.find((p) => p.id === id);
			if (!product) {
				toast({
					title: 'Product Not Found',
					description: 'Unable to locate the specified product.',
					variant: 'destructive',
				});
				return;
			}

			// Validate user
			if (!user?.email) {
				toast({
					title: 'Authentication Error',
					description: 'User email is required to perform this action.',
					variant: 'destructive',
				});
				return;
			}

			try {
				// Prepare request payload with new approach
				const requestBody = {
					id,
					isPublished: !product.isPublished,
					userEmail: user.email,
				};

				// Retrieve user token
				const token = sessionStorage.getItem('userToken');
				if (!token) {
					toast({
						title: 'Authentication Failed',
						description: 'No authentication token found.',
						variant: 'destructive',
					});
					return;
				}

				// Send request to single toggle endpoint
				const response = await fetch('/api/publishProducts', {
					method: 'PATCH',
					headers: {
						'Content-Type': 'application/json',
						Authorization: `Bearer ${token}`,
						'x-user-email': user.email,
					},
					body: JSON.stringify(requestBody),
				});

				// Check response status
				if (!response.ok) {
					const errorData = await response.json();
					throw new Error(
						errorData.error ||
							`Failed to ${product.isPublished ? 'unpublish' : 'publish'} product`
					);
				}

				// Parse response
				const result = await response.json();

				// Verify successful toggle
				if (!result.success) {
					throw new Error(result.message || 'Failed to update ad status');
				}

				// Optimistic update for better UX
				const updatedProducts = products.map((p) =>
					p.id === id ? { ...p, isPublished: !p.isPublished } : p
				);

				// Update state
				setProducts(updatedProducts);

				// Refresh published ads
				const updatedPublishedAds = await fetchPublishedAds(user.email);
				setPublishedAds(updatedPublishedAds);

				// Show success toast
				toast({
					title: !product.isPublished ? 'Ad Published' : 'Ad Unpublished',
					description: !product.isPublished
						? 'Your ad is now live and visible to users.'
						: 'Your ad has been removed from the published list.',
					variant: 'default',
				});
			} catch (error) {
				// Log the error for debugging
				console.error('Error toggling publish status:', error);

				// Show error toast
				toast({
					title: 'Action Failed',
					description:
						error instanceof Error
							? error.message
							: 'Unable to update ad status. Please try again.',
					variant: 'destructive',
				});

				// Optional: set error state if needed
				setError(
					error instanceof Error
						? error.message
						: 'Failed to update publication status'
				);
			}
		},
		[
			products,
			user?.email,
			fetchPublishedAds,
			toast,
			setProducts,
			setPublishedAds,
			setError,
		]
	);

	// Filter products
	const filteredProducts = products.filter(
		(product) =>
			product.title.toLowerCase().includes(filter.toLowerCase()) ||
			product.type.toLowerCase().includes(filter.toLowerCase())
	);

	// Calculate overall statistics
	const totalViews = products.reduce(
		(sum, p) => sum + (p.performance?.views || 0),
		0
	);
	const totalClicks = products.reduce(
		(sum, p) => sum + (p.performance?.clicks || 0),
		0
	);
	const averageCTR = products.length
		? (
				products.reduce((sum, p) => sum + (p.performance?.ctr || 0), 0) /
				products.length
			).toFixed(2)
		: '0.00';

	// Find best performing ad
	const bestPerformingAd =
		products.length > 0
			? products.reduce(
					(max, p) =>
						(p.performance?.clicks || 0) > (max.performance?.clicks || 0)
							? p
							: max,
					products[0]
				)
			: null;

	return (
		<div
			className={`min-h-screen bg-gray-100 dark:bg-gray-900 transition-all duration-300 ${isMenuOpen ? 'ml-[16rem]' : 'ml-[5.2rem]'}`}>
			<div className='p-6'>
				<div className='flex flex-col h-full bg-gradient-to-br from-gray-900 to-black min-h-[calc(100vh-60px)]'>
					<DashboardHeader
						userData={userData}
						onOpenSettings={() => setIsConfigOpen(!isConfigOpen)}
					/>

					<div className='flex flex-1 overflow-hidden'>
						<div className='flex-1 overflow-auto'>
							<div className='p-6 space-y-6'>
								<div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4'>
									{loading ? (
										Array(4)
											.fill(0)
											.map((_, i) => <StatCardSkeleton key={i} />)
									) : (
										<>
											<motion.div
												initial={{ opacity: 0, y: 20 }}
												animate={{ opacity: 1, y: 0 }}
												transition={{ duration: 0.3 }}
												className='bg-gradient-to-br from-slate-800/70 to-slate-900/70 backdrop-blur-md rounded-xl p-5 border border-slate-700/50 shadow-xl overflow-hidden relative group'>
												<div className='absolute inset-0 bg-gradient-to-r from-purple-500/10 to-pink-500/10 opacity-0 group-hover:opacity-100 transition-opacity duration-300'></div>
												<div className='flex justify-between items-start mb-3'>
													<div className='bg-purple-500/20 p-2 rounded-lg'>
														<Eye className='h-5 w-5 text-purple-400' />
													</div>
													<span className='text-xs text-gray-400 flex items-center gap-1'>
														<TrendingUp className='h-3 w-3 text-green-400' />
														+12.5%
													</span>
												</div>
												<h3 className='text-2xl font-bold text-white'>
													{totalViews.toLocaleString()}
												</h3>
												<p className='text-sm text-gray-400'>Total Views</p>
												<div className='absolute bottom-0 left-0 w-full h-1 bg-gradient-to-r from-purple-500 to-pink-500 scale-x-0 group-hover:scale-x-100 transition-transform origin-left duration-300'></div>
											</motion.div>

											<motion.div
												initial={{ opacity: 0, y: 20 }}
												animate={{ opacity: 1, y: 0 }}
												transition={{ duration: 0.3, delay: 0.1 }}
												className='bg-gradient-to-br from-slate-800/70 to-slate-900/70 backdrop-blur-md rounded-xl p-5 border border-slate-700/50 shadow-xl overflow-hidden relative group'>
												<div className='absolute inset-0 bg-gradient-to-r from-blue-500/10 to-cyan-500/10 opacity-0 group-hover:opacity-100 transition-opacity duration-300'></div>
												<div className='flex justify-between items-start mb-3'>
													<div className='bg-blue-500/20 p-2 rounded-lg'>
														<MousePointer className='h-5 w-5 text-blue-400' />
													</div>
													<span className='text-xs text-gray-400 flex items-center gap-1'>
														<TrendingUp className='h-3 w-3 text-green-400' />
														+8.3%
													</span>
												</div>
												<h3 className='text-2xl font-bold text-white'>
													{totalClicks.toLocaleString()}
												</h3>
												<p className='text-sm text-gray-400'>Total Clicks</p>
												<div className='absolute bottom-0 left-0 w-full h-1 bg-gradient-to-r from-blue-500 to-cyan-500 scale-x-0 group-hover:scale-x-100 transition-transform origin-left duration-300'></div>
											</motion.div>

											<motion.div
												initial={{ opacity: 0, y: 20 }}
												animate={{ opacity: 1, y: 0 }}
												transition={{ duration: 0.3, delay: 0.2 }}
												className='bg-gradient-to-br from-slate-800/70 to-slate-900/70 backdrop-blur-md rounded-xl p-5 border border-slate-700/50 shadow-xl overflow-hidden relative group'>
												<div className='absolute inset-0 bg-gradient-to-r from-green-500/10 to-emerald-500/10 opacity-0 group-hover:opacity-100 transition-opacity duration-300'></div>
												<div className='flex justify-between items-start mb-3'>
													<div className='bg-green-500/20 p-2 rounded-lg'>
														<Percent className='h-5 w-5 text-green-400' />
													</div>
													<span className='text-xs text-gray-400 flex items-center gap-1'>
														<TrendingUp className='h-3 w-3 text-green-400' />
														+2.1%
													</span>
												</div>
												<h3 className='text-2xl font-bold text-white'>
													{averageCTR}%
												</h3>
												<p className='text-sm text-gray-400'>Average CTR</p>
												<div className='absolute bottom-0 left-0 w-full h-1 bg-gradient-to-r from-green-500 to-emerald-500 scale-x-0 group-hover:scale-x-100 transition-transform origin-left duration-300'></div>
											</motion.div>

											<motion.div
												initial={{ opacity: 0, y: 20 }}
												animate={{ opacity: 1, y: 0 }}
												transition={{ duration: 0.3, delay: 0.3 }}
												className='bg-gradient-to-br from-slate-800/70 to-slate-900/70 backdrop-blur-md rounded-xl p-5 border border-slate-700/50 shadow-xl overflow-hidden relative group'>
												<div className='absolute inset-0 bg-gradient-to-r from-amber-500/10 to-orange-500/10 opacity-0 group-hover:opacity-100 transition-opacity duration-300'></div>
												<div className='flex justify-between items-start mb-3'>
													<div className='bg-amber-500/20 p-2 rounded-lg'>
														<Activity className='h-5 w-5 text-amber-400' />
													</div>
													<span className='text-xs text-gray-400'>
														{publishedAds.length} live
													</span>
												</div>
												<h3 className='text-lg font-bold text-white truncate'>
													{bestPerformingAd?.title || 'No data'}
												</h3>
												<p className='text-sm text-gray-400'>
													Top Performing Ad
												</p>
												<div className='absolute bottom-0 left-0 w-full h-1 bg-gradient-to-r from-amber-500 to-orange-500 scale-x-0 group-hover:scale-x-100 transition-transform origin-left duration-300'></div>
											</motion.div>
										</>
									)}
								</div>

								<div className='flex flex-col md:flex-row gap-6 items-center'>
									<div className='w-full md:w-2/3'>
										<ExpiringAdsAlert
											expiringAds={expiringAds}
											onSelectAd={setSelectedExpiringAd}
										/>
									</div>
								</div>

								<div className='mt-8'>
									<Tabs defaultValue='your-ads' className='w-full relative'>
										<div className='w-full bg-gradient-to-r from-slate-800/90 via-slate-850/90 to-slate-900/90 mb-8 shadow-2xl rounded-xl overflow-hidden relative border border-slate-700/50'>
											<div className='absolute inset-0 opacity-20 bg-[linear-gradient(45deg,transparent_25%,rgba(168,85,247,0.2)_50%,transparent_75%)] bg-[length:400%_400%] animate-shine'></div>

											<div className='absolute inset-0 overflow-hidden opacity-30'>
												<div className='particle-1'></div>
												<div className='particle-2'></div>
												<div className='particle-3'></div>
											</div>

											<div className='px-4 relative z-10'>
												<div className='absolute -top-2 right-4 z-20'>
													<Badge
														variant='destructive'
														className='bg-red-500 hover:bg-red-600 px-2 py-0.5 text-xs font-bold animate-pulse'>
														2 New
													</Badge>
												</div>

												<TabsList className='w-full flex bg-transparent p-0 gap-0.5 rounded-t-lg border-b border-slate-700/50'>
													{[
														{
															value: 'your-ads',
															label: 'Your Ads',
															icon: <Eye className='w-4 h-4 mr-2' />,
															notification: 0,
														},
														{
															value: 'published',
															label: 'Published Ads',
															icon: <ArrowUpRight className='w-4 h-4 mr-2' />,
															notification: 2,
														},
														{
															value: 'billboard',
															label: 'Billboards',
															icon: <Activity className='w-4 h-4 mr-2' />,
															notification: 0,
														},
														{
															value: 'tv_radio',
															label: 'TV & Radio',
															icon: <PieChart className='w-4 h-4 mr-2' />,
															notification: 0,
														},
														{
															value: 'campaign',
															label: 'Campaigns',
															icon: <Calendar className='w-4 h-4 mr-2' />,
															notification: 0,
														},
													].map((tab) => (
														<TabsTrigger
															key={tab.value}
															value={tab.value}
															className='
								group flex-1 px-6 py-4 text-sm font-semibold relative
								transition-all duration-300 ease-[cubic-bezier(0.4,0,0.2,1)]
								hover:bg-slate-700/30 data-[state=active]:bg-slate-900/70
								text-slate-300 hover:text-white data-[state=active]:text-white
								border-b-2 border-transparent data-[state=active]:border-purple-500
								flex items-center justify-center
							  '>
															<div className='absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity bg-[radial-gradient(ellipse_at_top,_var(--tw-gradient-stops))] from-purple-500/10 to-transparent'></div>

															<div
																className='
								absolute bottom-0 left-1/2 w-0 h-[2px] bg-gradient-to-r from-purple-500 to-fuchsia-400
								transition-all duration-300 group-data-[state=active]:w-full group-data-[state=active]:left-0
								group-hover:w-3/4 group-hover:left-1/4
							  '></div>

															<div className='flex items-center'>
																{tab.icon}
																<span
																	className='
																	relative truncate bg-clip-text group-hover:text-transparent
																	group-hover:bg-[linear-gradient(90deg,#fff_20%,#d8b4fe_40%,#c084fc_60%,#9333ea_80%,#fff_100%)]
																	group-hover:bg-[length:200%_auto] group-hover:animate-text-shine
																  '>
																	{tab.label}
																</span>
																{tab.notification > 0 && (
																	<span className='ml-2 flex h-5 w-5 items-center justify-center rounded-full bg-purple-600 text-xs font-medium text-white'>
																		{tab.notification}
																	</span>
																)}
															</div>
														</TabsTrigger>
													))}
												</TabsList>
											</div>
										</div>

										<div className='w-full'>
											<AnimatePresence mode='wait'>
												<TabsContent
													value='your-ads'
													className='data-[state=active]:animate-fadeIn'>
													<YourAdsTab
														products={products}
														loading={loading}
														skeletonComponent={ProductCardSkeleton}
														error={error}
														filteredProducts={filteredProducts}
														handleTogglePublish={handleTogglePublish}
														user={user}
													/>
												</TabsContent>

												<TabsContent
													value='published'
													className='data-[state=active]:animate-fadeIn'>
													<PublishedAdsTab
														publishedAds={publishedAds}
														handleTogglePublish={handleTogglePublish}
														user={user}
													/>
												</TabsContent>

												{['billboard', 'tv_radio', 'campaign'].map((tab) => (
													<TabsContent
														key={tab}
														value={tab}
														className='data-[state=active]:animate-fadeIn'>
														<div className='flex flex-col items-center justify-center py-12 px-4 text-center'>
															<div className='bg-gradient-to-b from-slate-800/70 to-slate-900/70 p-8 rounded-xl border border-slate-700/50 mb-4 shadow-lg'>
																<div className='w-20 h-20 mx-auto mb-6 rounded-full bg-gradient-to-br from-purple-500/20 to-fuchsia-500/20 flex items-center justify-center'>
																	{tab === 'billboard' && (
																		<Activity className='w-10 h-10 text-purple-400' />
																	)}
																	{tab === 'tv_radio' && (
																		<PieChart className='w-10 h-10 text-purple-400' />
																	)}
																	{tab === 'campaign' && (
																		<Calendar className='w-10 h-10 text-purple-400' />
																	)}
																</div>
																<h3 className='text-2xl font-bold text-white mb-3'>
																	Coming Soon
																</h3>
																<p className='text-gray-400 max-w-md mx-auto mb-6'>
																	Were working on amazing new features for this
																	section. Stay tuned for updates!
																</p>
																<Button
																	variant='outline'
																	className='bg-transparent border border-purple-500/50 hover:bg-purple-500/20 text-purple-400 hover:text-white'>
																	<Bell className='w-4 h-4 mr-2' />
																	Get Notified
																</Button>
															</div>
														</div>
													</TabsContent>
												))}
											</AnimatePresence>
										</div>
									</Tabs>
								</div>
							</div>

							<AnimatePresence>
								{isConfigOpen && (
									<>
										<motion.div
											initial={{ width: 0, opacity: 0 }}
											animate={{ width: 320, opacity: 1 }}
											exit={{ width: 0, opacity: 0 }}
											transition={{ duration: 0.3 }}
											className='border-l border-gray-700/50 bg-gray-800/70 backdrop-blur-md overflow-y-auto flex-shrink-0'>
											<div className='p-6'>
												<h2 className='text-xl font-bold text-white mb-6 flex items-center gap-2'>
													<Settings className='w-5 h-5 text-purple-400' />
													<span className='bg-clip-text text-transparent bg-gradient-to-r from-purple-400 to-pink-600'>
														Dashboard Settings
													</span>
												</h2>

												<div className='space-y-5'>
													<div className='bg-gradient-to-br from-gray-700/50 to-gray-800/50 p-4 rounded-xl border border-gray-600/30 shadow-lg'>
														<h3 className='text-sm font-semibold text-white mb-3 flex items-center gap-2'>
															<span className='h-3 w-3 rounded-full bg-purple-500'></span>
															Theme Settings
														</h3>

														<div className='space-y-3'>
															<div className='flex items-center justify-between'>
																<span className='text-xs text-gray-300'>
																	Dark Mode
																</span>
																<div className='w-10 h-5 bg-gray-600/50 rounded-full relative'>
																	<div className='absolute left-0.5 top-0.5 bg-purple-500 w-4 h-4 rounded-full transition-all'></div>
																</div>
															</div>

															<div className='flex items-center justify-between'>
																<span className='text-xs text-gray-300'>
																	Animations
																</span>
																<div className='w-10 h-5 bg-purple-500/50 rounded-full relative'>
																	<div className='absolute right-0.5 top-0.5 bg-purple-500 w-4 h-4 rounded-full transition-all'></div>
																</div>
															</div>

															<div className='pt-2'>
																<p className='text-xs text-gray-400 mb-2'>
																	Color Theme
																</p>
																<div className='flex gap-2'>
																	{[
																		'purple',
																		'blue',
																		'green',
																		'amber',
																		'rose',
																	].map((color) => (
																		<button
																			key={color}
																			className={`w-6 h-6 rounded-full ${
																				color === 'purple'
																					? 'bg-purple-500 ring-2 ring-purple-300 ring-offset-1 ring-offset-gray-800'
																					: color === 'blue'
																						? 'bg-blue-500'
																						: color === 'green'
																							? 'bg-green-500'
																							: color === 'amber'
																								? 'bg-amber-500'
																								: 'bg-rose-500'
																			}`}></button>
																	))}
																</div>
															</div>
														</div>
													</div>

													<div className='bg-gradient-to-br from-gray-700/50 to-gray-800/50 p-4 rounded-xl border border-gray-600/30 shadow-lg'>
														<h3 className='text-sm font-semibold text-white mb-3 flex items-center gap-2'>
															<span className='h-3 w-3 rounded-full bg-blue-500'></span>
															Ad Settings
														</h3>

														<div className='space-y-3'>
															<div className='flex items-center justify-between'>
																<span className='text-xs text-gray-300'>
																	Auto-extend Ads
																</span>
																<div className='w-10 h-5 bg-gray-600/50 rounded-full relative'>
																	<div className='absolute left-0.5 top-0.5 bg-gray-400 w-4 h-4 rounded-full transition-all'></div>
																</div>
															</div>

															<div className='flex items-center justify-between'>
																<span className='text-xs text-gray-300'>
																	Ad Analytics
																</span>
																<div className='w-10 h-5 bg-blue-500/50 rounded-full relative'>
																	<div className='absolute right-0.5 top-0.5 bg-blue-500 w-4 h-4 rounded-full transition-all'></div>
																</div>
															</div>

															<div className='pt-2'>
																<p className='text-xs text-gray-400 mb-2'>
																	Default Ad Duration
																</p>
																<select className='w-full bg-gray-700/50 border border-gray-600/30 rounded-md text-xs p-2 text-gray-300 focus:ring-2 focus:ring-blue-500 focus:outline-none'>
																	<option>7 days</option>
																	<option>14 days</option>
																	<option>30 days</option>
																	<option>60 days</option>
																</select>
															</div>
														</div>
													</div>

													<div className='bg-gradient-to-br from-gray-700/50 to-gray-800/50 p-4 rounded-xl border border-gray-600/30 shadow-lg'>
														<h3 className='text-sm font-semibold text-white mb-3 flex items-center gap-2'>
															<span className='h-3 w-3 rounded-full bg-green-500'></span>
															Notification Preferences
														</h3>

														<div className='space-y-3'>
															<div className='flex items-center justify-between'>
																<span className='text-xs text-gray-300'>
																	Email Alerts
																</span>
																<div className='w-10 h-5 bg-green-500/50 rounded-full relative'>
																	<div className='absolute right-0.5 top-0.5 bg-green-500 w-4 h-4 rounded-full transition-all'></div>
																</div>
															</div>

															<div className='flex items-center justify-between'>
																<span className='text-xs text-gray-300'>
																	Push Notifications
																</span>
																<div className='w-10 h-5 bg-green-500/50 rounded-full relative'>
																	<div className='absolute right-0.5 top-0.5 bg-green-500 w-4 h-4 rounded-full transition-all'></div>
																</div>
															</div>

															<div className='flex items-center justify-between'>
																<span className='text-xs text-gray-300'>
																	Expiring Ads Alert
																</span>
																<div className='w-10 h-5 bg-green-500/50 rounded-full relative'>
																	<div className='absolute right-0.5 top-0.5 bg-green-500 w-4 h-4 rounded-full transition-all'></div>
																</div>
															</div>
														</div>
													</div>

													<div className='bg-gradient-to-br from-gray-700/50 to-gray-800/50 p-4 rounded-xl border border-gray-600/30 shadow-lg'>
														<h3 className='text-sm font-semibold text-white mb-3 flex items-center gap-2'>
															<span className='h-3 w-3 rounded-full bg-amber-500'></span>
															Premium Features
														</h3>

														<div className='space-y-3'>
															<div className='flex items-center justify-between'>
																<span className='text-xs text-gray-300'>
																	Advanced Analytics
																</span>
																<div className='w-10 h-5 bg-amber-500/50 rounded-full relative'>
																	<div className='absolute right-0.5 top-0.5 bg-amber-500 w-4 h-4 rounded-full transition-all'></div>
																</div>
															</div>

															<div className='flex items-center justify-between'>
																<span className='text-xs text-gray-300'>
																	AI Recommendations
																</span>
																<div className='w-10 h-5 bg-amber-500/50 rounded-full relative'>
																	<div className='absolute right-0.5 top-0.5 bg-amber-500 w-4 h-4 rounded-full transition-all'></div>
																</div>
															</div>

															<div className='flex items-center justify-between'>
																<span className='text-xs text-gray-300'>
																	Campaign Automation
																</span>
																<div className='w-10 h-5 bg-gray-600/50 rounded-full relative'>
																	<div className='absolute left-0.5 top-0.5 bg-gray-400 w-4 h-4 rounded-full transition-all'></div>
																</div>
															</div>
														</div>
													</div>
												</div>
											</div>
										</motion.div>
									</>
								)}
							</AnimatePresence>
						</div>
					</div>
				</div>

				<div className='border-t border-gray-700/50 bg-gray-800/70 backdrop-blur-md p-6'>
					<div className='flex flex-col md:flex-row justify-between items-center mb-4'>
						<div className='flex items-center gap-2'>
							<span className='text-xs text-gray-400 flex items-center'>
								<Clock className='w-3 h-3 mr-1' />
								Last Updated:{' '}
								{new Date().toLocaleTimeString(undefined, { hour12: false })}
							</span>
						</div>
					</div>
				</div>

				{selectedExpiringAd && (
					<ExtendAdModal
						ad={selectedExpiringAd}
						onClose={() => setSelectedExpiringAd(null)}
						onExtend={handleExtendAd}
					/>
				)}

				<AnimatePresence>
					{notification && (
						<motion.div
							initial={{ opacity: 0, y: 20 }}
							animate={{ opacity: 1, y: 0 }}
							exit={{ opacity: 0, y: -20 }}
							transition={{ duration: 0.3 }}
							className='fixed bottom-4 right-4 bg-gradient-to-r from-green-500 to-emerald-600 text-white px-4 py-3 rounded-lg shadow-2xl flex items-center z-50'>
							<CheckCircle className='w-5 h-5 mr-2' />
							<span>{notification}</span>
							<button
								onClick={() => setNotification(null)}
								className='ml-4 text-white/80 hover:text-white'>
								<X className='w-4 h-4' />
							</button>
						</motion.div>
					)}
				</AnimatePresence>

				<button
					onClick={() => setShowHelp(!showHelp)}
					className='fixed bottom-4 left-4 bg-purple-500 hover:bg-purple-600 text-white rounded-full p-3 shadow-lg transition-all duration-300'>
					<HelpCircle className='w-5 h-5' />
				</button>

				<AnimatePresence>
					{showHelp && (
						<motion.div
							initial={{ opacity: 0, scale: 0.95 }}
							animate={{ opacity: 1, scale: 1 }}
							exit={{ opacity: 0, scale: 0.95 }}
							transition={{ duration: 0.2 }}
							className='fixed bottom-16 left-4 bg-gradient-to-br from-slate-800/90 to-slate-900/90 backdrop-blur-md rounded-xl p-5 border border-slate-700/50 shadow-xl w-72 z-50'>
							<h3 className='text-white font-medium mb-2 flex items-center'>
								<Info className='w-4 h-4 mr-2 text-purple-400' />
								Dashboard Help
							</h3>
							<ul className='space-y-2 text-sm text-gray-300'>
								<li className='flex items-start'>
									<ChevronRight className='w-3 h-3 mt-1 mr-1 text-purple-400' />
									<span>Click on ad cards to view detailed performance</span>
								</li>
								<li className='flex items-start'>
									<ChevronRight className='w-3 h-3 mt-1 mr-1 text-purple-400' />
									<span>Toggle Published to make ads live</span>
								</li>
								<li className='flex items-start'>
									<ChevronRight className='w-3 h-3 mt-1 mr-1 text-purple-400' />
									<span>Use filters to find specific ads quickly</span>
								</li>
							</ul>
							<button
								onClick={() => setShowHelp(false)}
								className='w-full mt-3 bg-purple-500/20 hover:bg-purple-500/30 text-purple-300 text-xs py-1.5 rounded transition-colors'>
								Got it
							</button>
						</motion.div>
					)}
				</AnimatePresence>
			</div>
		</div>
	);
};

export default Dashboard;
